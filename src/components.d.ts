/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AwesomeFlex {
        /**
          * The number of portions that the flex container is split into.
         */
        "baseFraction": number;
    }
    interface AwesomeFlexItem {
        "containerSizeChanged": (size: number) => Promise<void>;
        /**
          * The size of the flex item for lg screens, in terms of how many portions it should take up out of the total available. If `"auto"` is passed, it will be the size of its content. If `""` is passed, all flex items without setting the size will share the remaining space equally.
         */
        "lg": number | 'auto' | '';
        /**
          * The size of the flex item for md screens, in terms of how many portions it should take up out of the total available. If `"auto"` is passed, it will be the size of its content. If `""` is passed, all flex items without setting the size will share the remaining space equally.
         */
        "md": number | 'auto' | '';
        /**
          * The size of the flex item for sm screens, in terms of how many portions it should take up out of the total available. If `"auto"` is passed, it will be the size of its content. If `""` is passed, all flex items without setting the size will share the remaining space equally.
         */
        "sm": number | 'auto' | '';
        /**
          * The size of the flex item for xl screens, in terms of how many portions it should take up out of the total available. If `"auto"` is passed, it will be the size of its content. If `""` is passed, all flex items without setting the size will share the remaining space equally.
         */
        "xl": number | 'auto' | '';
        /**
          * The size of the flex item for xs screens, in terms of how many portions it should take up out of the total available. If `"auto"` is passed, it will be the size of its content. If nothing or `""` is passed, all flex items without setting the size will share the remaining space equally.
         */
        "xs": number | 'auto' | '';
        /**
          * The size of the flex item for xxl screens, in terms of how many portions it should take up out of the total available. If `"auto"` is passed, it will be the size of its content. If `""` is passed, all flex items without setting the size will share the remaining space equally.
         */
        "xxl": number | 'auto' | '';
    }
    interface AwesomeGrid {
        /**
          * The gap between each column.
         */
        "columnGap": string;
        /**
          * The column definitions. It receives a string defines the size of each column, split by space. eg. 1fr 2fr 50px 1fr
         */
        "columns": string;
        /**
          * The gap between each row.
         */
        "rowGap": string;
        /**
          * The row definitions. It receives a string defines the size of each row, split by space. eg. 1fr 2fr 50px 1fr
         */
        "rows": string;
    }
    interface AwesomeGridItem {
        /**
          * The column index of this item.
         */
        "column": number;
        /**
          * The number of columns that this item spanning in the grid.
         */
        "columnSpan": number;
        /**
          * The row index of this item.
         */
        "row": number;
        /**
          * The number of rows that this item spanning in the grid.
         */
        "rowSpan": number;
    }
    interface AwesomeRatioBox {
        /**
          * The factor of height.
         */
        "heightFactor": number;
        /**
          * The factor of width.
         */
        "widthFactor": number;
    }
    interface AwesomeViewBreak {
    }
    interface AwesomeWrap {
    }
}
declare global {
    interface HTMLAwesomeFlexElement extends Components.AwesomeFlex, HTMLStencilElement {
    }
    var HTMLAwesomeFlexElement: {
        prototype: HTMLAwesomeFlexElement;
        new (): HTMLAwesomeFlexElement;
    };
    interface HTMLAwesomeFlexItemElement extends Components.AwesomeFlexItem, HTMLStencilElement {
    }
    var HTMLAwesomeFlexItemElement: {
        prototype: HTMLAwesomeFlexItemElement;
        new (): HTMLAwesomeFlexItemElement;
    };
    interface HTMLAwesomeGridElement extends Components.AwesomeGrid, HTMLStencilElement {
    }
    var HTMLAwesomeGridElement: {
        prototype: HTMLAwesomeGridElement;
        new (): HTMLAwesomeGridElement;
    };
    interface HTMLAwesomeGridItemElement extends Components.AwesomeGridItem, HTMLStencilElement {
    }
    var HTMLAwesomeGridItemElement: {
        prototype: HTMLAwesomeGridItemElement;
        new (): HTMLAwesomeGridItemElement;
    };
    interface HTMLAwesomeRatioBoxElement extends Components.AwesomeRatioBox, HTMLStencilElement {
    }
    var HTMLAwesomeRatioBoxElement: {
        prototype: HTMLAwesomeRatioBoxElement;
        new (): HTMLAwesomeRatioBoxElement;
    };
    interface HTMLAwesomeViewBreakElement extends Components.AwesomeViewBreak, HTMLStencilElement {
    }
    var HTMLAwesomeViewBreakElement: {
        prototype: HTMLAwesomeViewBreakElement;
        new (): HTMLAwesomeViewBreakElement;
    };
    interface HTMLAwesomeWrapElement extends Components.AwesomeWrap, HTMLStencilElement {
    }
    var HTMLAwesomeWrapElement: {
        prototype: HTMLAwesomeWrapElement;
        new (): HTMLAwesomeWrapElement;
    };
    interface HTMLElementTagNameMap {
        "awesome-flex": HTMLAwesomeFlexElement;
        "awesome-flex-item": HTMLAwesomeFlexItemElement;
        "awesome-grid": HTMLAwesomeGridElement;
        "awesome-grid-item": HTMLAwesomeGridItemElement;
        "awesome-ratio-box": HTMLAwesomeRatioBoxElement;
        "awesome-view-break": HTMLAwesomeViewBreakElement;
        "awesome-wrap": HTMLAwesomeWrapElement;
    }
}
declare namespace LocalJSX {
    interface AwesomeFlex {
        /**
          * The number of portions that the flex container is split into.
         */
        "baseFraction"?: number;
    }
    interface AwesomeFlexItem {
        /**
          * The size of the flex item for lg screens, in terms of how many portions it should take up out of the total available. If `"auto"` is passed, it will be the size of its content. If `""` is passed, all flex items without setting the size will share the remaining space equally.
         */
        "lg"?: number | 'auto' | '';
        /**
          * The size of the flex item for md screens, in terms of how many portions it should take up out of the total available. If `"auto"` is passed, it will be the size of its content. If `""` is passed, all flex items without setting the size will share the remaining space equally.
         */
        "md"?: number | 'auto' | '';
        /**
          * The size of the flex item for sm screens, in terms of how many portions it should take up out of the total available. If `"auto"` is passed, it will be the size of its content. If `""` is passed, all flex items without setting the size will share the remaining space equally.
         */
        "sm"?: number | 'auto' | '';
        /**
          * The size of the flex item for xl screens, in terms of how many portions it should take up out of the total available. If `"auto"` is passed, it will be the size of its content. If `""` is passed, all flex items without setting the size will share the remaining space equally.
         */
        "xl"?: number | 'auto' | '';
        /**
          * The size of the flex item for xs screens, in terms of how many portions it should take up out of the total available. If `"auto"` is passed, it will be the size of its content. If nothing or `""` is passed, all flex items without setting the size will share the remaining space equally.
         */
        "xs"?: number | 'auto' | '';
        /**
          * The size of the flex item for xxl screens, in terms of how many portions it should take up out of the total available. If `"auto"` is passed, it will be the size of its content. If `""` is passed, all flex items without setting the size will share the remaining space equally.
         */
        "xxl"?: number | 'auto' | '';
    }
    interface AwesomeGrid {
        /**
          * The gap between each column.
         */
        "columnGap"?: string;
        /**
          * The column definitions. It receives a string defines the size of each column, split by space. eg. 1fr 2fr 50px 1fr
         */
        "columns"?: string;
        /**
          * The gap between each row.
         */
        "rowGap"?: string;
        /**
          * The row definitions. It receives a string defines the size of each row, split by space. eg. 1fr 2fr 50px 1fr
         */
        "rows"?: string;
    }
    interface AwesomeGridItem {
        /**
          * The column index of this item.
         */
        "column"?: number;
        /**
          * The number of columns that this item spanning in the grid.
         */
        "columnSpan"?: number;
        /**
          * The row index of this item.
         */
        "row"?: number;
        /**
          * The number of rows that this item spanning in the grid.
         */
        "rowSpan"?: number;
    }
    interface AwesomeRatioBox {
        /**
          * The factor of height.
         */
        "heightFactor"?: number;
        /**
          * The factor of width.
         */
        "widthFactor"?: number;
    }
    interface AwesomeViewBreak {
    }
    interface AwesomeWrap {
    }
    interface IntrinsicElements {
        "awesome-flex": AwesomeFlex;
        "awesome-flex-item": AwesomeFlexItem;
        "awesome-grid": AwesomeGrid;
        "awesome-grid-item": AwesomeGridItem;
        "awesome-ratio-box": AwesomeRatioBox;
        "awesome-view-break": AwesomeViewBreak;
        "awesome-wrap": AwesomeWrap;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "awesome-flex": LocalJSX.AwesomeFlex & JSXBase.HTMLAttributes<HTMLAwesomeFlexElement>;
            "awesome-flex-item": LocalJSX.AwesomeFlexItem & JSXBase.HTMLAttributes<HTMLAwesomeFlexItemElement>;
            "awesome-grid": LocalJSX.AwesomeGrid & JSXBase.HTMLAttributes<HTMLAwesomeGridElement>;
            "awesome-grid-item": LocalJSX.AwesomeGridItem & JSXBase.HTMLAttributes<HTMLAwesomeGridItemElement>;
            "awesome-ratio-box": LocalJSX.AwesomeRatioBox & JSXBase.HTMLAttributes<HTMLAwesomeRatioBoxElement>;
            "awesome-view-break": LocalJSX.AwesomeViewBreak & JSXBase.HTMLAttributes<HTMLAwesomeViewBreakElement>;
            "awesome-wrap": LocalJSX.AwesomeWrap & JSXBase.HTMLAttributes<HTMLAwesomeWrapElement>;
        }
    }
}
